name: Deploy NestJS Backend to AWS ECS

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yaml'

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: '23.11.0'
  AWS_REGION: 'eu-central-1'

jobs:

  # Build and push Docker image
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}
      image-tag: ${{ steps.build.outputs.image-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_BACKEND_GITHUB_ACTION_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-backend

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate image tag
        id: image-tag
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_TAG="${TIMESTAMP}-${SHORT_SHA}"
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Build and push Docker image
        id: build
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ secrets.BACKEND_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          LATEST_URI="${{ steps.login-ecr.outputs.registry }}/${{ secrets.BACKEND_ECR_REPOSITORY }}:latest"
          
          docker build \
            --target production \
            -t $IMAGE_URI \
            -t $LATEST_URI \
            ./backend
          
          docker push $IMAGE_URI
          docker push $LATEST_URI
          
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          echo "image-tag=${{ steps.image-tag.outputs.tag }}" >> $GITHUB_OUTPUT

      - name: Generate deployment artifacts
        run: |
          cat > imagedefinitions.json << EOF
          [
            {
              "name": "${{ secrets.BACKEND_CONTAINER_NAME }}",
              "imageUri": "${{ steps.build.outputs.image-uri }}"
            }
          ]
          EOF

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: imagedefinitions.json
          retention-days: 14

    # Deploy to ECS
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [ build-and-push ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download deployment artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_BACKEND_GITHUB_ACTION_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-backend-deploy

      - name: Deploy to ECS
        run: |
          TASK_DEFINITION=$(aws ecs describe-services \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }} \
            --query 'services[0].taskDefinition' \
            --output text)

          aws ecs describe-task-definition \
            --task-definition $TASK_DEFINITION \
            --query 'taskDefinition' > current-task-def.json

          sudo apt-get update && sudo apt-get install -y jq

          jq --arg IMAGE "${{ needs.build-and-push.outputs.image-uri }}" \
             '.containerDefinitions[0].image = $IMAGE' \
             current-task-def.json > updated-task-def.json

          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
             updated-task-def.json > new-task-def.json

          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

